import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import humidity from "../pages/assets/humidity.png";
import clear from "../pages/assets/clear.png";
import haze from "../pages/assets/haze.svg";
import rain from "../pages/assets/rain.png";
import snow from "../pages/assets/snow.png";
import cloudyDay from "../pages/assets/cloudyDay.svg";
import clearNight from "../pages/assets/clearNight.svg";
import cloudyNight from "../pages/assets/cloudyNight.svg";
import hazyNight from "../pages/assets/Hazy-Night.svg";
import smoke from "../pages/assets/smoke.svg";
import sunny from "../pages/assets/sunny.svg";
import wind from "../pages/assets/wind.png";

import { useEffect, useState } from "react";

export default function Home() {
  const [weatherData, setWeatherData] = useState(null);
  const [cityInput, setCityInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [weatherImage, setWeatherImage] = useState(haze);

  const getCurrentWeather = async (latitude, longitude) => {
    try {
      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=dba7bfaa8363a50167a43132ca5a7e12&units=metric`;
      let response = await fetch(url);
      let data = await response.json();
      setWeatherData(data);
    } catch (error) {
      console.error("Error fetching weather data:", error.message);
    }
  };

  const getWeatherImage = (weatherCond, isDay) => {
    const dayOrNight = isDay ? "day" : "night";
    switch (weatherCond.toLowerCase()) {
      case "clear":
        return isDay ? clear : clearNight;
      case "clouds":
        return isDay ? cloudyDay : cloudyNight;
      case "haze":
        return isDay ? haze : hazyNight;
      case "rain":
        return rain;
      case "snow":
        return snow;
      case "smoke":
        return smoke;
      case "sunny":
        return isDay ? sunny : clearNight;
    }
  };
  const isDayTime = (sunsetTime, sunriseTime) => {
    const currentTime = Math.floor(Date.now() / 1000);
    return currentTime >= sunriseTime && currentTime < sunsetTime;
  };
  useEffect(() => {
    if (weatherData && weatherData.sys) {
      // Extract sunrise and sunset time from the weather data
      const sunriseTime = weatherData.sys.sunrise;
      const sunsetTime = weatherData.sys.sunset;
      const isDay = isDayTime(sunriseTime, sunsetTime);

      const weatherCond = weatherData.weather[0].main;
      const weatherImage = getWeatherImage(weatherCond, isDay);
      setWeatherImage(weatherImage);
    }
  }, [weatherData]);

  const search = async () => {
    try {
      setLoading(true);
      let url = `https://api.openweathermap.org/data/2.5/weather?q=${cityInput}&appid=dba7bfaa8363a50167a43132ca5a7e12&units=metric`;
      let response = await fetch(url);
      let data = await response.json();
      setWeatherData(data);
    } catch (error) {
      console.error("Error fetching weather data:", error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    navigator.geolocation.getCurrentPosition((position) => {
      const { latitude, longitude } = position.coords;
      getCurrentWeather(latitude, longitude);
    });
  }, []);

  const handleInputChange = (e) => {
    setCityInput(e.target.value);
  };
  return (
    <>
      <Head>
        <title>Weather App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <div className={`${styles.card}`}>
          <h1 style={{ display: "flex", justifyContent: "center" }}>
            WEATHER APP
          </h1>
          <form className={`${styles.form}`}>
            <input
              className={`${styles.input}`}
              type="text"
              placeholder=" enter city name "
              value={cityInput}
              onChange={handleInputChange}
            />
            <button
              className={`${styles.button}`}
              style={{
                marginLeft: "1rem",
                borderRadius: "2rem",
                width: "6rem",
                height: "2rem",
                cursor: "pointer",
                fontSize: "16px",
                fontWeight: "bold",
                marginTop: "3px",
              }}
              onClick={search}
              disabled={loading}
            >
              {loading ? "Searching..." : "Search"}
            </button>
          </form>
          {weatherData && (
            <div>
              <div className={`${styles.weather}`}>
                <div>
                  <Image
                    src={weatherImage}
                    alt="weather"
                    className={`${styles.image}`}
                    priority
                  />
                </div>
                <div className={`${styles.weatherinfo}`}>
                  <div className={`${styles.temp}`}>
                    {Math.round(weatherData.main.temp)}Â°c
                  </div>
                  <div className={`${styles.description}`}>
                    {weatherData.weather[0].description}
                  </div>
                </div>
              </div>
              <div className={`${styles.name}`}>{weatherData.name}</div>
            </div>
          )}
          {weatherData && (
            <div className={`${styles.humidity_data}`}>
              <div>
                <div>
                  <Image src={humidity} className={`${styles.icon1}`} alt="" />
                </div>
                <div className={`${styles.humidity_percent}`}>
                  {weatherData.main.humidity}%
                </div>
                <div className={`${styles.text1}`}>Humidity</div>
              </div>
              <div>
                <div>
                  <Image src={wind} className={`${styles.icon2}`} />
                </div>
                <div className={`${styles.wind_percent}`}>
                  {Math.round(weatherData.wind.speed)} km/h
                </div>
                <div className={`${styles.text2}`}>Wind</div>
              </div>
            </div>
          )}
        </div>
      </main>
    </>
  );
}
